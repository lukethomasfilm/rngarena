function t(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const r of t)if("childList"===r.type)for(const t of r.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)}).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();class e{constructor(){this.totalParticipants=100,this.bracketSize=128,this.participants=[],this.bracket=[],this.currentRound=1,this.currentMatch=0,this.followingCharacter="Daring Hero",this.heroAlive=!0,this.characterVisualSides={},this.winners=new Set,this.heroNames=["Daring Hero","Sir Clumsy","Lord Butterfingers","Duke Tripsalot","Baron Whoopsie","Count Mishap","Sir Fumbles","Lord Oopsington","Duke Derp","Sir Noodles","Baron Giggles","Count Wiggles","Lord Snuggles","Sir Pickles","Duke Waffles","Baron Pancakes","Count Muffins","Sir Tickles","Lord Chuckles","Duke Sparkles","Baron Dimples","Count Silly","Sir Wobbly","Lord Jiggly","Duke Squiggly","Captain Chaos","Sir Stumbles","Lord Blunders","Duke Mishief","Baron Bumbles","Count Giggleton","Sir Wigglebottom","Lord Snickerdoodle","Duke Ticklebottom","Baron Chucklehead","Count Dingleberry","Sir Noodlethwaite","Lord Bumblestorm","Duke Gigglesnort","Baron Wobbleshire","Count Ticklebeard","Sir Snugglesworth","Lord Pickleface","Duke Wafflebottom","Baron Pancakehead","Count Muffinshire","Sir Tickletoes","Lord Chuckleberry","Duke Sparklebottom","Baron Dimpleshire","Count Sillyhat","Sir Wobblesnort","Lord Jigglybottom","Duke Squigglebeard","Captain Clumsyface","Sir Stumblebum","Lord Blunderworth","Duke Mischiefmaker","Baron Bumblebee","Count Gigglesworth","Sir Wiggletail","Lord Snickerdorf","Duke Ticklemonster","Baron Chucklenuts","Count Dingleworth","Sir Noodleface","Lord Bumblesnort","Duke Gigglebeard","Baron Wobblehead","Count Tickleshire","Sir Snugglesnort","Lord Picklebottom","Duke Waffleface","Baron Pancakeworth","Count Muffinhead","Sir Ticklebottom","Lord Chuckleface","Duke Sparkletail","Baron Dimplesnort","Count Sillybeard","Sir Wobbleface","Lord Jigglesnort","Duke Squigglehead","Captain Clumsytail","Sir Stumbleface","Lord Blundersnort","Duke Mischiefbeard","Baron Bumblehead","Count Gigglesnort","Sir Wigglebottom","Lord Snickerbottom","Duke Tickleface","Baron Chuckletail","Count Dinglesnort","Sir Noodletail","Lord Bumblehead","Duke Giggleface","Baron Wobblesnort","Count Tickletail","Sir Snugglehead","Lord Pickletail","Duke Wafflesnort","Baron Pancakehead","Count Muffintail","Sir Ticklehead","Lord Chuckletail"],this.heroTitles={"Daring Hero":["The Brave","Destined for Glory"],"Sir Clumsy":["The Accident-Prone","Trip Master"],"Lord Butterfingers":["The Slippery","Dropper of Things"],"Duke Tripsalot":["The Unsteady","Gravity's Friend"],"Baron Whoopsie":["The Oops Master","Professional Mistake Maker"],"Count Mishap":["The Unfortunate","Calamity Caller"],"Sir Fumbles":["The Klutzy","Butter Hands"],"Lord Oopsington":["The Blunderer","Error Enthusiast"],"Duke Derp":["The Confused","Question Mark Incarnate"],"Sir Noodles":["The Floppy","Pasta Knight"],"Baron Giggles":["The Cheerful","Laughter Lord"],"Count Wiggles":["The Squirmy","Dance Master"],"Lord Snuggles":["The Cuddly","Hug Champion"],"Sir Pickles":["The Sour","Brine Knight"],"Duke Waffles":["The Crispy","Syrup Seeker"],"Baron Pancakes":["The Fluffy","Stack Master"],"Count Muffins":["The Crumbly","Bakery Baron"],"Sir Tickles":["The Giggle Inducer","Feather Fighter"],"Lord Chuckles":["The Amused","Joke Keeper"],"Duke Sparkles":["The Shiny","Glitter Guardian"],"Baron Dimples":["The Cute","Cheek Champion"],"Count Silly":["The Goofy","Nonsense Noble"],"Sir Wobbly":["The Unsteady","Jello Knight"],"Lord Jiggly":["The Bouncy","Wobble Warrior"],"Duke Squiggly":["The Wiggly","Noodle Noble"],"Captain Chaos":["The Disorderly","Mayhem Master"],"Sir Stumbles":["The Tumbler","Ground Kisser"],"Lord Blunders":["The Mistake Maker","Error Earl"],"Duke Mishief":["The Prankster","Trouble Starter"],"Baron Bumbles":["The Bee-like","Buzz Baron"],"Count Giggleton":["The Laughing","Chortle Champion"],"Sir Wigglebottom":["The Dancing Rear","Booty Bouncer"],"Lord Snickerdoodle":["The Cookie","Sweet Warrior"],"Duke Ticklebottom":["The Funny Rear","Giggle Glutes"],"Baron Chucklehead":["The Funny Faced","Grin Guardian"],"Count Dingleberry":["The Clingy","Awkward Attachment"],"Sir Noodlethwaite":["The Pasta Knight","Spaghetti Swordsman"],"Lord Bumblestorm":["The Clumsy Hurricane","Disaster Dancer"],"Duke Gigglesnort":["The Snorty Laugher","Chortle Champion"],"Baron Wobbleshire":["The Shaky County","Trembling Territory"],"Count Ticklebeard":["The Fuzzy Chin","Whisker Warrior"],"Sir Snugglesworth":["The Cuddly Knight","Hug Hero"],"Lord Pickleface":["The Sour Visage","Briny Baron"],"Duke Wafflebottom":["The Crispy Rear","Syrup Sitter"],"Baron Pancakehead":["The Flat Top","Stack Skull"],"Count Muffinshire":["The Baked County","Crumb Count"],"Sir Tickletoes":["The Giggly Feet","Toe Tickler"],"Lord Chuckleberry":["The Fruity Laugher","Berry Funny"],"Duke Sparklebottom":["The Shiny Rear","Glitter Glutes"],"Baron Dimpleshire":["The Cute County","Cheek Territory"],"Count Sillyhat":["The Goofy Headwear","Hat of Nonsense"],"Sir Wobblesnort":["The Shaky Snorter","Trembling Nose"],"Lord Jigglybottom":["The Bouncy Rear","Wiggly Warrior"],"Duke Squigglebeard":["The Wavy Whiskers","Curly Chin"],"Captain Clumsyface":["The Awkward Visage","Trip Captain"],"Sir Stumblebum":["The Professional Faller","Gravity's Victim"],"Lord Blunderworth":["The Noble Mistake","Error Earl"],"Duke Mischiefmaker":["The Trouble Creator","Prank Prince"],"Baron Bumblebee":["The Buzzing","Honey Hunter"],"Count Gigglesworth":["The Worthy Laugher","Noble Chuckler"],"Sir Wiggletail":["The Dancing Rear","Tail Wagger"],"Lord Snickerdorf":["The Cookie Village","Sweet Settlement"],"Duke Ticklemonster":["The Giggle Beast","Feather Fiend"],"Baron Chucklenuts":["The Nutty Laugher","Silly Snacker"],"Count Dingleworth":["The Worthy Clingy","Attachment Earl"],"Sir Noodleface":["The Pasta Visage","Spaghetti Skull"],"Lord Bumblesnort":["The Clumsy Snorter","Accident Nose"],"Duke Gigglebeard":["The Laughing Whiskers","Funny Facial Hair"],"Baron Wobblehead":["The Shaky Skull","Trembling Top"],"Count Tickleshire":["The Giggly County","Feather Territory"],"Sir Snugglesnort":["The Cuddly Snorter","Hug Nose"],"Lord Picklebottom":["The Sour Rear","Briny Bottom"],"Duke Waffleface":["The Crispy Visage","Syrup Skull"],"Baron Pancakeworth":["The Worthy Stack","Fluffy Noble"],"Count Muffinhead":["The Baked Brain","Crumbly Cranium"],"Sir Ticklebottom":["The Giggly Rear","Funny Bottom"],"Lord Chuckleface":["The Laughing Visage","Grinning Guardian"],"Duke Sparkletail":["The Shiny Rear","Glittery Bottom"],"Baron Dimplesnort":["The Cute Snorter","Adorable Nose"],"Count Sillybeard":["The Goofy Whiskers","Nonsense Facial Hair"],"Sir Wobbleface":["The Shaky Visage","Trembling Head"],"Lord Jigglesnort":["The Bouncy Snorter","Wiggly Nose"],"Duke Squigglehead":["The Wavy Brain","Curly Cranium"],"Captain Clumsytail":["The Awkward Rear","Trip Tail"],"Sir Stumbleface":["The Falling Visage","Gravity Face"],"Lord Blundersnort":["The Mistake Snorter","Error Nose"],"Duke Mischiefbeard":["The Trouble Whiskers","Prank Facial Hair"],"Baron Bumblehead":["The Buzzing Brain","Bee Skull"],"Count Gigglesnort":["The Laughing Snorter","Chortle Nose"],"Sir Wigglebottom":["The Dancing Rear","Booty Bouncer"],"Lord Snickerbottom":["The Cookie Rear","Sweet Bottom"],"Duke Tickleface":["The Giggly Visage","Feather Face"],"Baron Chuckletail":["The Laughing Rear","Funny Tail"],"Count Dinglesnort":["The Clingy Snorter","Attachment Nose"],"Sir Noodletail":["The Pasta Rear","Spaghetti Tail"],"Lord Bumblehead":["The Clumsy Brain","Accident Skull"],"Duke Giggleface":["The Laughing Visage","Chortle Head"],"Baron Wobblesnort":["The Shaky Snorter","Trembling Nose"],"Count Tickletail":["The Giggly Rear","Feather Tail"],"Sir Snugglehead":["The Cuddly Brain","Hug Head"],"Lord Pickletail":["The Sour Rear","Briny Tail"],"Duke Wafflesnort":["The Crispy Snorter","Syrup Nose"],"Baron Pancakehead":["The Flat Brain","Stack Skull"],"Count Muffintail":["The Baked Rear","Crumbly Tail"],"Sir Ticklehead":["The Giggly Brain","Feather Head"],"Lord Chuckletail":["The Laughing Rear","Funny Tail"]},this.initializeTournament()}getCharacterTitles(t){return this.heroTitles[t]||["The Unknown","Mystery Fighter"]}isWinner(t){return this.winners.has(t)}getDisplayOrder(){const t=this.getCurrentMatch();if(!t)return null;if(!(t.participant1 in this.characterVisualSides))if(t.participant2 in this.characterVisualSides){const e=this.characterVisualSides[t.participant2];this.characterVisualSides[t.participant1]="left"===e?"right":"left"}else this.characterVisualSides[t.participant1]="left";if(!(t.participant2 in this.characterVisualSides))if(t.participant1 in this.characterVisualSides){const e=this.characterVisualSides[t.participant1];this.characterVisualSides[t.participant2]="left"===e?"right":"left"}else this.characterVisualSides[t.participant2]="right";const e=this.characterVisualSides[t.participant1];let r,i;this.characterVisualSides[t.participant2],"left"===e?(r=t.participant1,i=t.participant2):(r=t.participant2,i=t.participant1);return{leftFighter:r,rightFighter:i,followedOnLeft:r===this.followingCharacter}}initializeTournament(){this.participants=[...this.heroNames.slice(0,this.totalParticipants)],this.followingCharacter="Daring Hero",this.heroAlive=!0,this.characterVisualSides={},this.winners=new Set;const t=this.participants.slice(1);this.shuffleArray(t),this.participants=["Daring Hero",...t],this.generateBracket()}shuffleArray(t){for(let e=t.length-1;e>0;e--){const r=Math.floor(Math.random()*(e+1));[t[e],t[r]]=[t[r],t[e]]}}generateBracket(){this.bracket=[];const t=[];for(let r=0;r<this.bracketSize;r++)r<this.participants.length?t.push(this.participants[r]):t.push(null);this.bracket.push(t);let e=this.bracketSize/2;for(;e>=1;){const t=new Array(e).fill(null);this.bracket.push(t),e/=2}this.processInitialByes()}processInitialByes(){const t=this.bracket[0],e=this.bracket[1];for(let r=0;r<t.length;r+=2){const i=t[r],a=t[r+1],s=Math.floor(r/2);i&&!a?e[s]=i:!i&&a&&(e[s]=a)}}getCurrentMatch(){const t=this.bracket[this.currentRound-1];for(let e=0;e<t.length;e+=2){const r=t[e],i=t[e+1];if((r===this.followingCharacter||i===this.followingCharacter)&&r&&i)return{participant1:r,participant2:i,matchIndex:Math.floor(e/2),roundPosition:e}}return null}hasMatchToFight(){return null!==this.getCurrentMatch()}hasFollowedCharacterBye(){const t=this.bracket[this.currentRound-1];for(let e=0;e<t.length;e+=2){const r=t[e],i=t[e+1];if(r===this.followingCharacter&&!i)return{character:r,position:"left"};if(i===this.followingCharacter&&!r)return{character:i,position:"right"}}return null}battleResult(t){const e=this.getCurrentMatch();if(!e)return null;const r=this.getDisplayOrder(),i=t?r.leftFighter:r.rightFighter,a=t?r.rightFighter:r.leftFighter,s=a===this.followingCharacter;return this.currentRound<this.bracket.length&&(this.bracket[this.currentRound][e.matchIndex]=i),this.winners.add(i),s&&("Daring Hero"===this.followingCharacter&&(this.heroAlive=!1),this.followingCharacter=i),{winner:i,loser:a,followingChanged:s}}simulateRemainingMatches(){const t=this.bracket[this.currentRound-1];for(let e=0;e<t.length;e+=2){const r=t[e],i=t[e+1],a=Math.floor(e/2);if((r===this.followingCharacter||i===this.followingCharacter)&&r&&i)continue;if(this.bracket[this.currentRound][a]||!r||!i)continue;const s=Math.random()<.5?r:i;this.bracket[this.currentRound][a]=s}}advanceToNextMatch(){this.simulateRemainingMatches();const t=this.bracket[this.currentRound-1];let e=!0;for(let r=0;r<t.length;r+=2){const i=t[r],a=t[r+1],s=Math.floor(r/2);if(i&&a&&!this.bracket[this.currentRound][s]){e=!1;break}}e&&this.currentRound<this.bracket.length-1&&this.currentRound++}getRoundInfo(){const t=this.bracket.length-1;return{current:this.currentRound,total:t,name:["Round 1","Round 2","Round 3","Round 4","Round 5","Round 6","Quarterfinals","Semifinals","Final"][this.currentRound-1]||"Round ".concat(this.currentRound),participantsLeft:this.bracket[this.currentRound-1].filter(t=>null!==t).length}}isComplete(){return this.currentRound>=this.bracket.length-1&&this.bracket[this.bracket.length-1][0]}getWinner(){return this.isComplete()?this.bracket[this.bracket.length-1][0]:null}}class r{constructor(){this.tournament=new e,this.currentOpponent="Random Fighter",this.tournamentStarted=!1,this.autoContinue=!1,this.battleInProgress=!1,this.knightImages=["Knight_01.png","Knight_02.png","Knight_03.png","knight_04.png","knight_05.png"],this.characterImageCache=new Map,this.allImages=[],this.imagesLoaded=!1,this.leftFighterHP=5,this.rightFighterHP=5,this.combatLog=[],this.currentTurn="left",this.combatRound=1,this.seed=this.generateSeed(),this.rng=this.createSeededRNG(this.seed),this.leftFighter=document.querySelector(".fighter-left"),this.rightFighter=document.querySelector(".fighter-right"),this.battleStatus=document.querySelector(".battle-status"),this.startButton=document.getElementById("start-battle"),this.chatMessages=document.getElementById("chat-messages"),this.arenaViewport=document.querySelector(".arena-viewport"),this.progressSegments=document.getElementById("progress-segments"),this.backgrounds=["castle","forest","desert","mountain","ships"],this.currentBgIndex=0,this.leftFighterNameEl=document.getElementById("left-nameplate-name"),this.rightFighterNameEl=document.getElementById("right-nameplate-name"),this.leftFighterTitlesEl=document.getElementById("left-nameplate-titles"),this.rightFighterTitlesEl=document.getElementById("right-nameplate-titles"),this.leftFighterCard=document.querySelector(".left-fighter-card"),this.rightFighterCard=document.querySelector(".right-fighter-card"),this.bracketDisplay=document.getElementById("bracket-display"),this.chatContainer=document.querySelector(".chat-container"),this.chatInput=document.getElementById("chat-input"),this.sendChatBtn=document.getElementById("send-chat"),this.bracketViewport=document.querySelector(".bracket-viewport"),this.bracketSlider=document.getElementById("bracket-slider"),this.zoomInBtn=document.getElementById("zoom-in"),this.zoomOutBtn=document.getElementById("zoom-out"),this.zoomLevel=document.getElementById("zoom-level"),this.currentZoom=1,this.currentScrollX=0,this.currentScrollY=0,this.chatLines=["TOURNAMENT BRACKET BATTLE!","WHO'S GONNA WIN?!","rip","GO HERO!","UPSET INCOMING","50/50 BABY","EPIC MEDIEVAL BATTLE","OMG OMG OMG","POGGERS","EZ CLAP","NO WAY","LUCKY","RNG GOD","SCRIPTED","RIGGED","CASTLE VIBES","FOREST FIGHT","DESERT DUEL","MOUNTAIN MAYHEM","BRACKET MADNESS","KEKW","LMAOOO","THIS IS NUTS","RNG IS CRAZY","SWORD GO BRRRR","SHEESH","BASED","CRACKED","BUILT DIFFERENT","NO CAP","FR FR","STONKS","DIAMOND HANDS","TO THE MOON","MONKE BRAIN","BANANA","SMOOTH BRAIN","BIG BRAIN","GALAXY BRAIN","SADGE","COPIUM","HOPIUM","MALDING","PEPEGA","PEPE LAUGH","OMEGALUL","5HEAD","ACTUALLY INSANE","UNREAL","ABSOLUTELY MENTAL","BONKERS","WILD","SICK PLAY","NUTTY","CRINGE","BASED AND REDPILLED","TOUCH GRASS","RATIO","L + RATIO","SKILL ISSUE","GET GOOD","NOOB","PRO GAMER MOVE","GAMER MOMENT","EPIC GAMER","LITERALLY SHAKING","I CAN'T EVEN","BRUH MOMENT","YEET","PERIODT","SUS","AMONGUS","IMPOSTOR","VENTING","EMERGENCY MEETING","RED SUS","MINECRAFT STEVE","FORTNITE BATTLE PASS","CHUNGUS","WHOLESOME 100","REDDIT MOMENT","SIMP","CHAD","VIRGIN VS CHAD","BASED CHAD","SIGMA MALE","ALPHA MOVE","BETA BEHAVIOR","MAIN CHARACTER ENERGY","NPC BEHAVIOR","CERTIFIED HOOD CLASSIC","HITS DIFFERENT","NO PRINTER","FACTS","SPITTING FACTS","PERIODT NO PRINTER","AND I OOP","SKSKSK","VSCO GIRL","OK BOOMER","ZOOMER ENERGY","MILLENNIAL HUMOR","GEN Z CHAOS","IT'S GIVING...","SLAY QUEEN","PERIODT BESTIE","NOT THE...","THE WAY I...","I'M DECEASED","STOP I'M CRYING","HELP-","BYE-","AKSJDHAKSJD","KEYBOARD SMASH","NO THOUGHTS HEAD EMPTY","BRAIN.EXE STOPPED","404 ERROR","WINDOWS XP SHUTDOWN","DIAL UP INTERNET","LOADING...","BUFFERING","LAG","PING DIFF","SKILLED PLAYER","UNSKILLED PLAYER"],this.byeMessages=["AUTOMATIC BYE!","ADVANCED WITHOUT FIGHTING","NO OPPONENT AVAILABLE!","LUCKY BRACKET PLACEMENT","FREE PASS TO NEXT ROUND","BRACKET BYE!"],this.winMessages=["WHAT A SWORD FIGHT!","INCREDIBLE BLADE WORK!","GGWP","CLEAN SWEEP","DEMOLISHED","BLADE MASTER!","SWORD LEGEND!","TOURNAMENT CONTINUES!","ADVANCING TO NEXT ROUND!"],this.init()}async init(){this.leftFighter&&this.rightFighter&&this.battleStatus&&this.startButton?(this.startButton.style.display="block",this.startButton.addEventListener("click",()=>this.startTournament()),this.preloadAllGraphics(),this.sendChatBtn&&this.sendChatBtn.addEventListener("click",()=>this.sendUserMessage()),this.chatInput&&this.chatInput.addEventListener("keypress",t=>{"Enter"===t.key&&this.sendUserMessage()}),this.startChatScroll(),this.updateOdds(),this.initProgressBar(),this.hideRightFighter(),this.arenaViewport.className="arena-viewport ".concat(this.backgrounds[this.currentBgIndex]),this.updateDisplay(),this.renderBracket(),this.initBracketControls(),this.initBracketOverlay(),this.initBracketAutoScroll(),this.initBracketAccordion()):console.error("Required DOM elements not found")}async preloadAllGraphics(){const t=[];this.knightImages.forEach(e=>{t.push("images/Characters/".concat(e))}),t.push("images/Characters/Daring_hero.png");t.push("images/backgrounds/castle_background.png","images/backgrounds/japan_background.png","images/backgrounds/desert_background.png","images/backgrounds/snow_background.png","images/backgrounds/ships_background.png");const e=t.map(t=>this.loadImage(t));try{this.allImages=await Promise.all(e),this.imagesLoaded=!0,console.log("All graphics preloaded successfully")}catch(r){console.error("Error preloading graphics:",r),this.imagesLoaded=!0}}loadImage(t){return new Promise((e,r)=>{const i=new Image;i.onload=()=>e(i),i.onerror=()=>r(new Error("Failed to load ".concat(t))),i.src=t})}hideRightFighter(){this.rightFighter.style.opacity="0",this.rightFighterCard.style.opacity="0",this.rightFighterCard.style.transform="translateX(50px)"}showOpponentEntrance(){this.rightFighter.style.transition="opacity 1s ease, transform 1s ease",this.rightFighterCard.style.transition="opacity 1s ease, transform 1s ease",setTimeout(()=>{this.rightFighter.style.opacity="1",this.rightFighterCard.style.opacity="1",this.rightFighterCard.style.transform="translateX(0)"},500)}getCharacterImage(t){if("Daring Hero"===t)return"Daring_hero.png";if(!this.characterImageCache.has(t)){const e=Math.floor(Math.random()*this.knightImages.length);this.characterImageCache.set(t,this.knightImages[e])}return this.characterImageCache.get(t)}updateFighterSprite(t,e){const r=t.querySelector(".fighter-sprite");if(!r)return;const i=this.getCharacterImage(e),a="./images/Characters/".concat(i),s=t.classList.contains("fighter-left"),n=t.classList.contains("fighter-right"),o=s&&("knight_05.png"===i||"Knight_01.png"===i||"Knight_03.png"===i)||n&&"knight_04.png"===i?"transform: scale(0.8) scaleX(-1);":"transform: scale(0.8);";r.innerHTML='<img src="'.concat(a,'" alt="').concat(e,'" class="character-image" style="').concat(o,'">')}startTournament(){this.tournamentStarted?this.startBattle():(this.tournamentStarted=!0,this.autoContinue=!0,this.startButton.style.display="none",this.addChatMessage("TOURNAMENT BEGINS! DARING HERO VS THE WORLD!"),this.showOpponentEntrance(),setTimeout(()=>{this.startBattle()},1500))}startBattle(){const t=this.tournament.getCurrentMatch();if(!t)return void this.handleNoMatch();const e=this.tournament.hasFollowedCharacterBye();if(e)return void this.handleByeRound(e);const r=this.tournament.getRoundInfo();this.addAnnouncerMessage("🎺 ".concat(r.name.toUpperCase()," BEGINS! 🎺")),this.addAnnouncerMessage("⚔️ ".concat(t.participant1.toUpperCase()," VS ").concat(t.participant2.toUpperCase()," ⚔️")),this.renderBracket(),setTimeout(()=>{this.scrollToCurrentMatch()},200),this.battleStatus.style.opacity="0",this.switchBackground(),this.resetFighters(),this.cleanupCombatElements(),this.updateMatchDisplay(t),setTimeout(()=>this.fighterEntrance(),500)}resetFighters(){this.leftFighter.className="fighter-left",this.rightFighter.className="fighter-right";const t=this.leftFighter.querySelector(".fighter-sprite"),e=this.rightFighter.querySelector(".fighter-sprite");t&&(t.style.animation=""),e&&(e.style.animation="")}fighterEntrance(){this.leftFighter.classList.add("fighter-entrance-left"),this.rightFighter.classList.add("fighter-entrance-right"),this.addChatMessage("FIGHTERS ENTER THE ARENA!"),this.addChatMessage("HERE WE GO!"),setTimeout(()=>this.executeFight(),2e3)}executeFight(){this.startCombat(),this.addChatMessage("TURN-BASED COMBAT BEGINS!"),this.addChatMessage("WATCH THE DICE ROLLS!")}resolveFight(t){const e=this.tournament.battleResult(t);if(!e)return;const r=this.tournament.getCurrentMatch(),i=this.tournament.getDisplayOrder();r&&i&&this.updateFighterCards(r,i);const a=t?this.leftFighter:this.rightFighter,s=t?this.rightFighter:this.leftFighter,n=a.querySelector(".fighter-sprite img");n&&(n.style.animation="victory-glow 1s ease-in-out"),setTimeout(()=>{s.classList.add("fighter-exit")},300),setTimeout(()=>{const t=a.querySelector(".fighter-sprite");t&&t.classList.add("winner-pose")},500),this.battleStatus.textContent="".concat(e.winner.toUpperCase()," WINS!"),this.addAnnouncerMessage("🏆 ".concat(e.winner.toUpperCase()," WINS! 🏆")),"Daring Hero"===e.loser&&(this.addAnnouncerMessage("💀 DARING HERO HAS BEEN ELIMINATED! 💀"),this.addAnnouncerMessage("👑 NOW FOLLOWING ".concat(e.winner.toUpperCase(),"! 👑"))),this.addChatMessage(this.getRandomFromArray(this.winMessages)),this.addChatMessage("GG!"),setTimeout(()=>{this.tournament.advanceToNextMatch(),this.updateOdds(),this.updateProgressBar(),this.updateDisplay(),this.renderBracket(),setTimeout(()=>{this.scrollToCurrentMatch()},300),this.autoContinue&&!this.tournament.isComplete()?setTimeout(()=>this.startBattle(),2e3):this.enableRestart()},2e3)}updateOdds(){const t=this.tournament.getRoundInfo().participantsLeft,e="1 in ".concat(t.toLocaleString()),r=document.querySelector(".crown-odds");r&&(r.textContent=e)}enableRestart(){const t=this.tournament.getRoundInfo();if(this.startButton.disabled=!1,this.tournament.isComplete()){const t=this.tournament.getWinner();this.startButton.textContent="".concat(t.toUpperCase()," WINS THE CROWN!"),this.startButton.disabled=!0,this.addChatMessage("CROWN WINNER!"),this.addChatMessage("LEGENDARY!"),this.showVictoryAnimation(t)}else this.startButton.textContent="CONTINUE ".concat(t.name.toUpperCase())}startChatScroll(){this.chatMessages&&(this.addChatMessage("Welcome to RNG Arena!"),this.addChatMessage("Pure RNG battles await..."),this.chatScrollInterval=setInterval(()=>{this.startButton.disabled||this.addChatMessage(this.getRandomFromArray(this.chatLines))},800+1200*Math.random()))}addChatMessage(t){if(!this.chatMessages||!t)return;const e=document.createDocumentFragment(),r=document.createElement("div");r.className="chat-message";const i=this.generateRandomUsername();r.innerHTML='\n            <span class="chat-username">'.concat(i,": ").concat(t,"</span>\n        "),e.appendChild(r),this.chatMessages.appendChild(e),requestAnimationFrame(()=>{this.chatMessages.scrollTop=this.chatMessages.scrollHeight});for(;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}addAnnouncerMessage(t){if(!this.chatMessages||!t)return;const e=document.createElement("div");e.className="chat-message announcer-message",e.innerHTML='\n            <span class="chat-username announcer-username">ANNOUNCER: '.concat(t,"</span>\n        "),this.chatMessages.appendChild(e),requestAnimationFrame(()=>{this.chatMessages.scrollTop=this.chatMessages.scrollHeight});for(;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}addCombatMessage(t){if(!this.chatMessages||!t)return;const e=document.createElement("div");e.className="chat-message combat-message";let r=t;t.includes("blocks")&&(r=t.replace(/blocks/g,'<span style="color: #4CAF50; font-weight: bold;">blocks</span>')),t.includes("damage")&&(r=r.replace(/damage/g,'<span style="color: #ff4444; font-weight: bold;">damage</span>'),r=r.replace(/(\d+)(?=\s+damage)/g,'<span style="color: #ff6666; font-weight: bold;">$1</span>')),t.includes("CRIT")&&(r=r.replace(/CRIT/g,'<span style="color: #ff0000; font-weight: bold; text-shadow: 0 0 5px #ff0000;">CRIT</span>')),t.includes("critical")&&(r=r.replace(/critical/g,'<span style="color: #ff0000; font-weight: bold;">critical</span>')),t.includes("parries")&&(r=r.replace(/parries/g,'<span style="color: #FF9800; font-weight: bold;">parries</span>')),t.includes("misses")&&(r=r.replace(/misses/g,'<span style="color: #9E9E9E; font-weight: bold;">misses</span>')),e.innerHTML='\n            <span class="chat-username">Combat: '.concat(r,"</span>\n        "),this.chatMessages.appendChild(e),requestAnimationFrame(()=>{this.chatMessages.scrollTop=this.chatMessages.scrollHeight});for(;this.chatMessages.children.length>100;)this.chatMessages.removeChild(this.chatMessages.firstChild)}generateRandomUsername(){const t=this.getRandomFromArray(["RNG","Lucky","Fighter","Arena","Battle","Coin","Epic","Pro"]),e=this.getRandomFromArray(["God","King","Master","Lord","2023","Pro","X","Legend"]),r=Math.floor(999*Math.random());return"".concat(t).concat(e).concat(r)}getRandomFromArray(t){return t[Math.floor(Math.random()*t.length)]}switchBackground(){if(!this.arenaViewport)return;this.backgrounds.forEach(t=>{this.arenaViewport.classList.remove(t)});const t=this.backgrounds[this.currentBgIndex];this.arenaViewport.classList.add(t),this.currentBgIndex=(this.currentBgIndex+1)%this.backgrounds.length;this.addChatMessage({castle:"Welcome to the Castle Arena!",forest:"Fighting in the Forest Arena!",desert:"Battle in the Desert Arena!",mountain:"Combat in the Mountain Arena!"}[t])}updateDisplay(){const t=this.tournament.getCurrentMatch(),e=this.tournament.getDisplayOrder();this.updateFighterCards(t,e)}updateMatchDisplay(t){const e=this.tournament.getDisplayOrder();if(e){if(this.leftFighterNameEl&&(this.leftFighterNameEl.textContent=e.leftFighter,this.updateFighterSprite(this.leftFighter,e.leftFighter)),this.leftFighterTitlesEl){const t=this.tournament.getCharacterTitles(e.leftFighter);this.leftFighterTitlesEl.textContent=t.join(" • ")}if(this.rightFighterNameEl&&(this.rightFighterNameEl.textContent=e.rightFighter,this.updateFighterSprite(this.rightFighter,e.rightFighter),this.rightFighterTitlesEl)){const t=this.tournament.getCharacterTitles(e.rightFighter);this.rightFighterTitlesEl.textContent=t.join(" • ")}this.updateKnightColors(e.leftFighter,e.rightFighter),this.updateFighterCards(t,e)}}updateFighterCards(t,e){if(this.leftFighterCard.className="fighter-card left-fighter-card",this.rightFighterCard.className="fighter-card right-fighter-card",!t)return;const r=e?e.leftFighter:t.participant1,i=e?e.rightFighter:t.participant2;this.tournament.isWinner(r)?this.leftFighterCard.classList.add("following"):"Daring Hero"===r&&this.leftFighterCard.classList.add("daring-hero"),this.tournament.isWinner(i)?this.rightFighterCard.classList.add("following"):"Daring Hero"===i&&this.rightFighterCard.classList.add("daring-hero")}handleNoMatch(){this.addChatMessage("Tournament completed or no match available!"),this.enableRestart()}handleByeRound(t){this.battleStatus.textContent="BYE ROUND",this.battleStatus.style.opacity="1",this.addChatMessage("rest easy my friend and prepare for your next battle"),this.addChatMessage("".concat(t.character.toUpperCase()," ADVANCES AUTOMATICALLY!")),this.addChatMessage("NO OPPONENT AVAILABLE!"),this.updateByeDisplay(t),this.switchBackground(),setTimeout(()=>{this.tournament.advanceToNextMatch(),this.updateOdds(),this.updateProgressBar(),this.updateDisplay(),this.renderBracket(),this.autoContinue&&!this.tournament.isComplete()?setTimeout(()=>this.startBattle(),1500):this.enableRestart()},2e3)}updateByeDisplay(t){if("left"===t.position){this.leftFighterNameEl.textContent=t.character;const e=this.tournament.getCharacterTitles(t.character);this.leftFighterTitlesEl.textContent=e.join(" • "),this.updateFighterSprite(this.leftFighter,t.character),this.rightFighterNameEl.textContent="---",this.rightFighterTitlesEl.textContent="No Opponent";const r=this.rightFighter.querySelector(".fighter-sprite");r&&(r.innerHTML="")}else{this.rightFighterNameEl.textContent=t.character;const e=this.tournament.getCharacterTitles(t.character);this.rightFighterTitlesEl.textContent=e.join(" • "),this.updateFighterSprite(this.rightFighter,t.character),this.leftFighterNameEl.textContent="---",this.leftFighterTitlesEl.textContent="No Opponent";const r=this.leftFighter.querySelector(".fighter-sprite");r&&(r.innerHTML="")}const e={participant1:null,participant2:null};"left"===t.position?e.participant1=t.character:e.participant2=t.character,this.updateFighterCards(e,null)}showVictoryAnimation(t){const e=this.leftFighterNameEl.textContent,r=this.rightFighterNameEl.textContent;let i,a;if(e===t)i=this.leftFighter,a="left";else if(r===t)i=this.rightFighter,a="right";else{i=this.leftFighter,a="left",this.leftFighterNameEl.textContent=t;const e=this.tournament.getCharacterTitles(t);this.leftFighterTitlesEl.textContent=e.join(" • ")}("left"===a?this.rightFighter:this.leftFighter).style.opacity="0";const s="left"===a?"15%":"85%",n="left"===a?"0%":"-100%";i.style.setProperty("--start-position",s),i.style.setProperty("--start-transform",n),i.classList.add("victory-center");const o=i.querySelector(".fighter-sprite img");o&&(o.style.filter="drop-shadow(0 0 20px white) drop-shadow(0 0 40px white) drop-shadow(0 0 60px white)",o.style.animation="victory-glow 2s ease-in-out infinite"),setTimeout(()=>{const t=document.createElement("div");t.className="victory-crown",t.textContent="👑",i.appendChild(t)},1e3),setTimeout(()=>{const t=document.createElement("div");t.className="victor-text",t.textContent="VICTOR!",this.arenaViewport.appendChild(t)},2e3),setTimeout(()=>{const e=document.createElement("div");e.className="victory-nameplate";const r=this.tournament.getCharacterTitles(t);e.innerHTML='\n                <div class="victory-name">'.concat(t,'</div>\n                <div class="victory-title">').concat(r.join(" • "),"</div>\n            "),i.appendChild(e)},2500),this.battleStatus.style.opacity="0"}generateSeed(){const t=this.tournament.getCurrentMatch();if(!t)return 12345;let e=0;const r=t.participant1+t.participant2;for(let i=0;i<r.length;i++)e=(e<<5)-e+r.charCodeAt(i)&4294967295;return Math.abs(e)||12345}createSeededRNG(t){let e=t;return function(){return e=16807*e%2147483647,(e-1)/2147483646}}rollDie(t){return Math.floor(this.rng()*t)+1}getMaxHPForRound(){const t=this.tournament.getRoundInfo().current;return t>=7?20:t>=6?12:t>=5?8:5}initHealthDisplays(){const t=document.querySelector(".left-nameplate");t&&t.querySelectorAll(".fighter-health").forEach(t=>t.remove());const e=this.getMaxHPForRound();this.createHealthDisplay(this.leftFighter,e),this.leftFighterHP=e,this.rightFighterHP=e,this.combatLog=[],this.currentTurn="left",this.combatRound=1,this.seed=this.generateSeed(),this.rng=this.createSeededRNG(this.seed)}createHealthDisplay(t,e){const r=document.createElement("div");r.className="fighter-health";for(let i=0;i<e;i++){const t=document.createElement("div");t.className="health-diamond",r.appendChild(t)}if(t.classList.contains("fighter-left")){const t=document.querySelector(".left-nameplate");t&&t.appendChild(r)}}updateHealthDisplay(t,e){if(!t.classList.contains("fighter-left"))return;const r=document.querySelector(".left-nameplate");if(!r)return;const i=r.querySelector(".fighter-health");if(!i)return;i.querySelectorAll(".health-diamond").forEach((t,r)=>{r>=e?t.classList.add("lost"):t.classList.remove("lost")})}startCombat(){this.initHealthDisplays(),this.battleStatus.textContent="COMBAT BEGINS!",this.battleStatus.style.opacity="1",setTimeout(()=>this.executeCombatBeat(),1e3)}executeCombatBeat(){const t="left"===this.currentTurn?"left":"right",e="left"===this.currentTurn?"right":"left",r="left"===t?this.leftFighter:this.rightFighter,i="left"===t?this.rightFighter:this.leftFighter,a="left"===t?this.leftFighterNameEl.textContent:this.rightFighterNameEl.textContent,s="left"===t?this.rightFighterNameEl.textContent:this.leftFighterNameEl.textContent,n=this.rollDie(6),o=5===n;this.addCombatAnimation(r,"fighter-attacking"),this.showCombatText(r,"ATTACK!","attacker-name"),setTimeout(()=>{if(6===n)this.handleMiss(r,a);else{const t=this.rollDie(7)+1;this.addCombatAnimation(i,"fighter-defending"),setTimeout(()=>{if(7===t)this.handleBlock(i,s,n,o);else if(8===t)this.handleParry(r,i,a,s,n,o);else{const t=o?7:n;this.handleHit(i,s,t,e,o)}},500)}},800)}handleMiss(t,e){this.addCombatAnimation(t,"fighter-miss"),this.showCombatText(t,"MISS!","miss-text");const r="".concat(e," attacks but misses!");this.addCombatLog(r),this.addCombatMessage("⚔️ ".concat(e," swings and misses!")),this.nextTurn()}handleBlock(t,e,r,i){this.addCombatAnimation(t,"fighter-block"),this.showCombatText(t,"BLOCK!","block-text");const a=i?"CRIT":r.toString(),s="".concat(e," blocks ").concat(a," damage!");this.addCombatLog(s),this.addCombatMessage("🛡️ ".concat(e," blocks ").concat(a," damage!")),this.nextTurn()}handleParry(t,e,r,i,a,s){this.addCombatAnimation(e,"fighter-parry"),this.showCombatText(e,"PARRY!","parry-text"),setTimeout(()=>{this.addCombatAnimation(t,"fighter-hit"),this.showDamageNumber(t,a,s);"left"===(t===this.leftFighter?"left":"right")?(this.leftFighterHP-=a,this.updateHealthDisplay(this.leftFighter,this.leftFighterHP)):this.rightFighterHP-=a;const e=s?"CRIT":a.toString(),n="".concat(i," parries and reflects ").concat(e," damage back to ").concat(r,"!");this.addCombatLog(n),this.addCombatMessage("⚡ ".concat(i," parries and reflects ").concat(e," damage back to ").concat(r,"!")),this.leftFighterHP<=0||this.rightFighterHP<=0?this.endCombat():this.nextTurn()},800)}handleHit(t,e,r,i,a){const s="left"===i?this.rightFighter:this.leftFighter,n="left"===i?this.rightFighterNameEl.textContent:this.leftFighterNameEl.textContent;this.showAttackerDamage(s,r,a),setTimeout(()=>{this.addCombatAnimation(t,"fighter-hit"),a&&this.addCombatAnimation(t,"fighter-crit-glow"),this.showDamageNumber(t,r,a),"left"===i?(this.leftFighterHP-=r,this.updateHealthDisplay(this.leftFighter,this.leftFighterHP)):this.rightFighterHP-=r;const s=a?"CRIT":r.toString(),o="".concat(n," deals ").concat(s," damage to ").concat(e,"!");this.addCombatLog(o),this.addCombatMessage("💀 ".concat(n," deals ").concat(s," damage to ").concat(e,"!")),this.leftFighterHP<=0||this.rightFighterHP<=0?this.endCombat():this.nextTurn()},800)}nextTurn(){this.currentTurn="left"===this.currentTurn?"right":"left",setTimeout(()=>{this.leftFighterHP>0&&this.rightFighterHP>0&&this.executeCombatBeat()},1500)}endCombat(){const t=this.rightFighterHP<=0,e=t?this.leftFighterNameEl.textContent:this.rightFighterNameEl.textContent,r=t?this.rightFighterNameEl.textContent:this.leftFighterNameEl.textContent,i="".concat(e," defeats ").concat(r," with ").concat(t?this.leftFighterHP:this.rightFighterHP," HP remaining!");this.addCombatLog(i),this.battleStatus.textContent="".concat(e.toUpperCase()," WINS!"),setTimeout(()=>{this.resolveFight(t)},2e3)}addCombatAnimation(t,e){t.classList.add(e),setTimeout(()=>t.classList.remove(e),1e3)}showDamageNumber(t,e,r=!1){const i=document.createElement("div");i.className=r?"crit-number":"damage-number",i.textContent=r?"CRIT!":"-".concat(e),t.appendChild(i);setTimeout(()=>i.remove(),r?2500:2e3)}showAttackerDamage(t,e,r=!1){const i=document.createElement("div");i.className=r?"attacker-crit-number":"attacker-damage-number",i.textContent="".concat(e),t.appendChild(i);setTimeout(()=>i.remove(),r?1500:1200)}showCombatText(t,e,r){const i=document.createElement("div");i.className=r,i.textContent=e,t.appendChild(i),setTimeout(()=>i.remove(),1200)}addCombatLog(t){this.combatLog.push("Beat ".concat(this.combatLog.length+1,": ").concat(t)),this.addChatMessage("⚔️ ".concat(t))}cleanupCombatElements(){const t=document.querySelector(".left-nameplate");t&&t.querySelectorAll(".fighter-health").forEach(t=>t.remove()),this.leftFighter.querySelectorAll(".damage-number, .block-text, .parry-text, .miss-text").forEach(t=>t.remove()),this.rightFighter.querySelectorAll(".damage-number, .block-text, .parry-text, .miss-text").forEach(t=>t.remove()),this.arenaViewport.querySelectorAll(".victor-text").forEach(t=>t.remove()),this.leftFighter.querySelectorAll(".victory-crown, .victory-nameplate").forEach(t=>t.remove()),this.rightFighter.querySelectorAll(".victory-crown, .victory-nameplate").forEach(t=>t.remove()),this.leftFighter.style.opacity="1",this.rightFighter.style.opacity="1",this.leftFighter.style.removeProperty("--start-position"),this.leftFighter.style.removeProperty("--start-transform"),this.rightFighter.style.removeProperty("--start-position"),this.rightFighter.style.removeProperty("--start-transform"),this.leftFighter.classList.remove("victory-center"),this.rightFighter.classList.remove("victory-center");const e=this.getMaxHPForRound();this.leftFighterHP=e,this.rightFighterHP=e,this.combatLog=[],this.currentTurn="left",this.combatRound=1}generateCharacterColors(t){let e=0;for(let o=0;o<t.length;o++)e=(e<<5)-e+t.charCodeAt(o)&4294967295;const r=()=>(e=16807*e%2147483647,(e-1)/2147483646),i=[{primary:"#8B0000",secondary:"#A0001A",name:"Crimson"},{primary:"#006400",secondary:"#228B22",name:"Forest"},{primary:"#4B0082",secondary:"#6A0DAD",name:"Royal"},{primary:"#FF8C00",secondary:"#FFA500",name:"Amber"},{primary:"#191970",secondary:"#483D8B",name:"Midnight"},{primary:"#8B008B",secondary:"#9932CC",name:"Violet"},{primary:"#2F4F4F",secondary:"#708090",name:"Steel"},{primary:"#800000",secondary:"#A52A2A",name:"Burgundy"}],a=[{primary:"#4169E1",secondary:"#2E4BC7",boss:"#FFD700",name:"Sapphire"},{primary:"#DC143C",secondary:"#B22222",boss:"#FFD700",name:"Scarlet"},{primary:"#228B22",secondary:"#006400",boss:"#FFD700",name:"Emerald"},{primary:"#FF6347",secondary:"#FF4500",boss:"#FFD700",name:"Flame"},{primary:"#9932CC",secondary:"#8A2BE2",boss:"#FFD700",name:"Amethyst"},{primary:"#CD853F",secondary:"#D2691E",boss:"#FFD700",name:"Bronze"},{primary:"#483D8B",secondary:"#2F4F4F",boss:"#FFD700",name:"Slate"},{primary:"#B8860B",secondary:"#DAA520",boss:"#FFD700",name:"Golden"}],s=Math.floor(r()*i.length),n=Math.floor(r()*a.length);return{cape:i[s],shield:a[n]}}updateKnightColors(t,e){const r=this.generateCharacterColors(t),i=this.generateCharacterColors(e);this.applyKnightColors(this.leftFighter,r,"left"),this.applyKnightColors(this.rightFighter,i,"right")}applyKnightColors(t,e,r){}darkenColor(t){const e=t.replace("#",""),r=Math.max(0,Math.floor(.8*parseInt(e.substr(0,2),16))),i=Math.max(0,Math.floor(.8*parseInt(e.substr(2,2),16))),a=Math.max(0,Math.floor(.8*parseInt(e.substr(4,2),16)));return"#".concat(r.toString(16).padStart(2,"0")).concat(i.toString(16).padStart(2,"0")).concat(a.toString(16).padStart(2,"0"))}renderBracket(){if(!this.bracketDisplay)return;const t=this.tournament.getRoundInfo(),e=this.tournament.getCurrentMatch(),r=['<div class="bracket-tree">'];for(let i=0;i<this.tournament.bracket.length-1;i++){const a=this.tournament.bracket[i],s=this.getRoundName(i+1),n=i+1===t.current;r.push('<div class="bracket-round">'),r.push('<div class="bracket-round-title '.concat(n?"active-round":"",'">').concat(s,"</div>")),r.push('<div class="bracket-matches">');for(let o=0;o<a.length;o+=2){const s=a[o],n=a[o+1],h=Math.floor(o/2),c=this.tournament.bracket[i+1],l=c&&c[h],d=e&&i+1===t.current&&(s===e.participant1&&n===e.participant2||s===e.participant2&&n===e.participant1),g=this.isMatchOnFollowingPath(s,n,i+1);r.push(this.renderMatch(s,n,l,d,c?c[h]:null,g,i<this.tournament.bracket.length-2))}r.push("</div></div>")}if(this.tournament.isComplete()){const t=this.tournament.getWinner();r.push('<div class="bracket-round">'),r.push('<div class="bracket-round-title">CHAMPION</div>'),r.push('<div class="bracket-winner-display">🏆 '.concat(t," 🏆</div>")),r.push("</div>")}r.push("</div>"),this.bracketDisplay.innerHTML=r.join(""),this.updateSliderRange(),setTimeout(()=>{this.scrollToCurrentMatch()},100)}renderMatch(t,e,r,i,a,s,n){if(!t&&!e)return'<div class="bracket-match empty"><div class="bracket-bye">Empty</div></div>';if(!t||!e){const r=t||e;let i="bracket-match bye-match";return s&&(i+=" following-path"),'<div class="'.concat(i,'">\n                <div class="bracket-participant bye-winner ').concat(r===this.tournament.followingCharacter?"following":"",'">').concat(r,"</div>\n                ").concat(n?'<div class="bracket-connector'+(s?" active":"")+'"></div>':"","\n            </div>")}let o="bracket-match";r&&(o+=" completed"),i&&(o+=" current"),s&&(o+=" following-path");let h='<div class="'.concat(o,'">'),c="bracket-participant";r&&a===t?c+=" winner":r&&a!==t&&(c+=" eliminated"),t===this.tournament.followingCharacter&&(c+=" following"),h+='<div class="'.concat(c,'">').concat(t,"</div>"),h+='<div class="vs-separator">VS</div>';let l="bracket-participant";return r&&a===e?l+=" winner":r&&a!==e&&(l+=" eliminated"),e===this.tournament.followingCharacter&&(l+=" following"),h+='<div class="'.concat(l,'">').concat(e,"</div>"),n&&(h+='<div class="bracket-connector'.concat(s?" active":"",'"></div>')),h+="</div>",h}isMatchOnFollowingPath(t,e,r){return t===this.tournament.followingCharacter||e===this.tournament.followingCharacter||this.isCharacterInFuturePath(t,e,r)}isCharacterInFuturePath(t,e,r){let i=this.tournament.followingCharacter;for(let a=this.tournament.currentRound-1;a>=r;a--){const r=this.tournament.bracket[a-1],s=this.tournament.bracket[a];for(let a=0;a<r.length;a+=2){const n=r[a],o=r[a+1];if(s[Math.floor(a/2)]===i&&(n===t||n===e||o===t||o===e))return!0}}return!1}getRoundName(t){return{1:"Round of 128",2:"Round of 64",3:"Round of 32",4:"Round of 16",5:"Quarterfinals",6:"Semifinals",7:"Final"}[t]||"Round ".concat(t)}sendUserMessage(){if(!this.chatInput)return;const t=this.chatInput.value.trim();""!==t&&(this.addUserChatMessage(t),this.chatInput.value="")}addUserChatMessage(t){if(!this.chatMessages||!t)return;const e=document.createElement("div");e.className="chat-message user-message",e.innerHTML='\n            <span class="chat-username user-username">You: '.concat(t,"</span>\n        "),this.chatMessages.appendChild(e),this.chatMessages.scrollTop=this.chatMessages.scrollHeight}initProgressBar(){if(!this.progressSegments)return;const t=this.tournament.getRoundInfo();this.progressSegments.innerHTML="";for(let e=0;e<t.total;e++){const t=document.createElement("div");t.className="progress-segment remaining",this.progressSegments.appendChild(t)}this.updateProgressBar()}updateProgressBar(){if(!this.progressSegments)return;const t=this.tournament.getRoundInfo(),e=this.progressSegments.children;console.log("Tournament Progress: Round ".concat(t.current," of ").concat(t.total," (").concat(t.name,")")),console.log("Participants left: ".concat(t.participantsLeft));const r=["tier-gray","tier-white","tier-green","tier-blue","tier-purple","tier-orange","tier-gold"];for(let i=0;i<e.length;i++)if(i<t.current-1){const t=r[i]||"tier-gold";e[i].className="progress-segment completed ".concat(t)}else i===t.current-1?e[i].className="progress-segment current":e[i].className="progress-segment remaining";this.updateLootGem(t)}updateLootGem(t){this.updateLootBox(t)}updateLootBox(t){const e=document.getElementById("loot-box");if(!e)return;const r=[{name:"unknown",material:"Unknown",chestNumber:8},{name:"wood",material:"Wooden",chestNumber:7},{name:"stone",material:"Stone",chestNumber:6},{name:"bronze",material:"Bronze",chestNumber:5},{name:"silver",material:"Silver",chestNumber:4},{name:"gold",material:"Golden",chestNumber:3},{name:"platinum",material:"Platinum",chestNumber:2},{name:"diamond",material:"Diamond",chestNumber:1}],i=Math.max(0,t.current-1),a=r[Math.min(i,r.length-1)],s=document.querySelector(".loot-header");s&&(s.textContent="".concat(a.material.toUpperCase()," LOOT"));const n=a.chestNumber.toString().padStart(2,"0"),o="./images/Loot/chest_".concat(n,".png"),h=e.querySelector(".loot-chest-image");h&&h.src.includes("chest_".concat(n,".png"))||(e.style.opacity="0",e.style.transition="opacity 0.3s ease-in-out",setTimeout(()=>{e.innerHTML='<img src="'.concat(o,'" alt="').concat(a.material,' Chest" class="loot-chest-image">'),e.style.opacity="1"},300))}createLootBoxSVG(t){const{colors:e}=t;return"unknown"===t.name?'<svg width="140" height="120" viewBox="0 0 120 100" class="loot-svg">\n                <rect x="25" y="50" width="70" height="35" fill="'.concat(e.base,'" stroke="#303030" stroke-width="2" rx="3"/>\n                <path d="M25 50 Q25 35 60 35 Q95 35 95 50 L95 45 Q95 30 60 30 Q25 30 25 45 Z" fill="').concat(e.lid,'" stroke="').concat(e.base,'" stroke-width="2"/>\n                <text x="60" y="55" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="').concat(e.accent,'" text-anchor="middle">?</text>\n                <circle cx="30" cy="60" r="3" fill="#303030" stroke="#202020" stroke-width="1"/>\n                <circle cx="90" cy="60" r="3" fill="#303030" stroke="#202020" stroke-width="1"/>\n                <circle cx="30" cy="75" r="3" fill="#303030" stroke="#202020" stroke-width="1"/>\n                <circle cx="90" cy="75" r="3" fill="#303030" stroke="#202020" stroke-width="1"/>\n            </svg>'):'<svg width="140" height="120" viewBox="0 0 120 100" class="loot-svg">\n            <rect x="25" y="50" width="70" height="35" fill="'.concat(e.base,'" stroke="').concat(this.darkenColor(e.base),'" stroke-width="2" rx="3"/>\n            <path d="M25 50 Q25 35 60 35 Q95 35 95 50 L95 45 Q95 30 60 30 Q25 30 25 45 Z" fill="').concat(e.lid,'" stroke="').concat(e.base,'" stroke-width="2"/>\n            <rect x="57" y="42" width="6" height="8" fill="').concat(e.accent,'" stroke="').concat(this.darkenColor(e.accent),'" stroke-width="1" rx="1"/>\n            <circle cx="60" cy="46" r="2" fill="').concat(e.accent,'" stroke="').concat(this.darkenColor(e.accent),'" stroke-width="1"/>\n            <rect x="23" y="55" width="74" height="3" fill="').concat(this.darkenColor(e.base),'"/>\n            <rect x="23" y="70" width="74" height="3" fill="').concat(this.darkenColor(e.base),'"/>\n            <circle cx="30" cy="60" r="3" fill="').concat(e.base,'" stroke="').concat(this.darkenColor(e.base),'" stroke-width="1"/>\n            <circle cx="90" cy="60" r="3" fill="').concat(e.base,'" stroke="').concat(this.darkenColor(e.base),'" stroke-width="1"/>\n            <circle cx="30" cy="75" r="3" fill="').concat(e.base,'" stroke="').concat(this.darkenColor(e.base),'" stroke-width="1"/>\n            <circle cx="90" cy="75" r="3" fill="').concat(e.base,'" stroke="').concat(this.darkenColor(e.base),'" stroke-width="1"/>\n            ').concat("diamond"===t.name?'<polygon points="60,20 65,30 55,30" fill="#00CED1" stroke="#008B8B" stroke-width="1"/>':"","\n        </svg>")}initBracketControls(){this.bracketViewport&&this.bracketSlider&&this.zoomInBtn&&this.zoomOutBtn&&(this.zoomInBtn.addEventListener("click",()=>this.zoomIn()),this.zoomOutBtn.addEventListener("click",()=>this.zoomOut()),this.bracketSlider.addEventListener("input",t=>{this.updateVerticalScroll(t.target.value)}),this.bracketViewport.addEventListener("scroll",()=>{this.syncSliderWithScroll()}),this.bracketViewport.addEventListener("wheel",t=>{t.ctrlKey&&(t.preventDefault(),t.deltaY<0?this.zoomIn():this.zoomOut())}),this.updateSliderRange())}zoomIn(){this.currentZoom<3&&(this.currentZoom=Math.min(3,this.currentZoom+.2),this.updateBracketTransform(),this.updateZoomDisplay(),this.updateSliderRange())}zoomOut(){this.currentZoom>.5&&(this.currentZoom=Math.max(.5,this.currentZoom-.2),this.updateBracketTransform(),this.updateZoomDisplay(),this.updateSliderRange())}updateBracketTransform(){this.bracketDisplay&&(this.bracketDisplay.style.transform="scale(".concat(this.currentZoom,")"))}updateZoomDisplay(){this.zoomLevel&&(this.zoomLevel.textContent="".concat(Math.round(100*this.currentZoom),"%"))}updateVerticalScroll(t){if(!this.bracketViewport)return;const e=this.bracketViewport.scrollHeight-this.bracketViewport.clientHeight;this.bracketViewport.scrollTop=e*(t/100)}syncSliderWithScroll(){if(!this.bracketSlider||!this.bracketViewport)return;const t=this.bracketViewport.scrollHeight-this.bracketViewport.clientHeight;if(t>0){const e=this.bracketViewport.scrollTop/t*100;this.bracketSlider.value=e}}updateSliderRange(){this.bracketSlider&&this.bracketViewport&&setTimeout(()=>{this.bracketViewport.scrollHeight-this.bracketViewport.clientHeight<=0?(this.bracketSlider.style.opacity="0.3",this.bracketSlider.disabled=!0):(this.bracketSlider.style.opacity="1",this.bracketSlider.disabled=!1)},100)}initBracketAutoScroll(){setInterval(()=>{var t,e;if(this.tournamentStarted&&!this.tournament.isComplete()){const r=null==(t=this.bracketDisplay)?void 0:t.querySelector(".bracket-match.current");if(r){const t=null==(e=this.bracketViewport)?void 0:e.getBoundingClientRect(),i=r.getBoundingClientRect();if(t&&i){i.top>=t.top&&i.bottom<=t.bottom||(console.log("Current match not visible, auto-scrolling..."),this.scrollToCurrentMatch())}}}},3e3)}initBracketAccordion(){const t=document.getElementById("bracket-toggle"),e=document.getElementById("bracket-content");t&&e&&(e.classList.remove("expanded"),t.classList.remove("expanded"),t.addEventListener("click",r=>{if(r.target.closest(".bracket-zoom-controls"))return;e.classList.contains("expanded")?(e.classList.remove("expanded"),t.classList.remove("expanded")):(e.classList.add("expanded"),t.classList.add("expanded"))}))}scrollToCurrentMatch(){if(!this.bracketViewport||!this.bracketDisplay)return void console.log("Bracket viewport or display not found");const t=this.bracketDisplay.querySelector(".bracket-match.current");if(!t){console.log("No current match element found");const t=this.bracketDisplay.querySelector(".bracket-round");if(t){const e=t.offsetTop-this.bracketViewport.clientHeight/4;this.bracketViewport.scrollTo({top:Math.max(0,e),behavior:"smooth"})}return}console.log("Found current match element, scrolling to it");const e=t.closest(".bracket-round");e?setTimeout(()=>{const t=e.offsetTop,r=this.bracketViewport.clientHeight,i=Math.max(0,t-r/3);console.log("Scrolling to round at position:",i),this.bracketViewport.scrollTo({top:i,behavior:"smooth"}),setTimeout(()=>{this.syncSliderWithScroll&&this.syncSliderWithScroll()},600)},50):console.log("No current round found")}initBracketOverlay(){const t=document.getElementById("bracket-mode");document.getElementById("bracket-overlay");const e=document.getElementById("close-bracket"),r=document.querySelector(".bracket-overlay-background");t&&t.addEventListener("click",()=>{this.showBracketOverlay()}),e&&e.addEventListener("click",()=>{this.hideBracketOverlay()}),r&&r.addEventListener("click",()=>{this.hideBracketOverlay()})}showBracketOverlay(){const t=document.getElementById("bracket-overlay"),e=document.getElementById("overlay-bracket-display");t&&(t.classList.remove("hidden"),e&&this.bracketDisplay&&(e.innerHTML=this.bracketDisplay.innerHTML))}hideBracketOverlay(){const t=document.getElementById("bracket-overlay");t&&t.classList.add("hidden")}}document.addEventListener("DOMContentLoaded",()=>{new r}),document.addEventListener("DOMContentLoaded",()=>{new r});export{t as __vite_legacy_guard};
